<!-- A Capture Point is a place in a computer program where the debugger collects and
	saves stack frames to be used later when you reach a specific point in the code and
	want to see how the program got there. See [[https://www.jetbrains.com/help/idea/
	tutorial-java-debugging-deep-dive. html#async_stacktraces]] for a detailed description
	of how capture points work and [[go/intellij-futures]] for the design doc to this file.

	Capture Points are defined for these methods:

	1) {Promise, ConstFuture}.{respond, transform}
	2) Future.{map, flatMap, onSuccess, onFailure, filter, addEventListener, joinWith} -->

<capture-points>

	<!-- com.twitter.util.{Promise, ConstFuture}.{respond, transform}
	NOTE: Capturing respond and transform in this fashion will allow us to capture
	frames from any method defined in terms of these two methods, which covers most
	of the methods in com.twitter.util.Future API. -->

	<!-- com.twitter.util.Promise.respond -->
	<capture-point enabled="true"
				   class-name="com.twitter.util.Promise"
				   method-name="respond"
				   capture-key-expression="k"
				   insert-class-name="com.twitter.util.Promise$Monitored"
				   insert-method-name="apply"
				   insert-key-expression="k" />

	<!-- com.twitter.util.Promise.transform -->
	<capture-point enabled="true"
				   class-name="com.twitter.util.Promise"
				   method-name="transform"
				   capture-key-expression="f"
				   insert-class-name="com.twitter.util.Promise$Transformer"
				   insert-method-name="liftedTree1$1"
				   insert-key-expression="this.f" />

	<!-- com.twitter.util.ConstFuture.respond -->
	<capture-point enabled="true"
				   class-name="com.twitter.util.ConstFuture"
				   method-name="respond"
				   capture-key-expression="k"
				   insert-class-name="com.twitter.util.ConstFuture$$anon$1"
				   insert-method-name="run"
				   insert-key-expression="k" />

	<!-- com.twitter.util.ConstFuture.transform -->
	<capture-point enabled="true"
				   class-name="com.twitter.util.ConstFuture"
				   method-name="transform"
				   capture-key-expression="f"
				   insert-class-name="com.twitter.util.ConstFuture$$anon$2"
				   insert-method-name="run"
				   insert-key-expression="f" />

	<!-- NOTE: The following capture points are for specific methods in com.twitter.util,
	and only apply for the methods that are defined unless otherwise stated. The Capture
	Points are intended to produce more concise stack traces than would be produced from
	the preceding capture points. -->

	<!-- com.twitter.util.Future.map -->
	<capture-point enabled="true"
				   class-name="com.twitter.util.Future"
				   method-name="map"
				   capture-key-expression="f"
				   insert-class-name="com.twitter.util.Future$$anonfun$map$1$$anonfun$apply$3"
				   insert-method-name="apply"
				   insert-key-expression="f" />

	<!-- com.twitter.util.Future.flatMap -->
	<capture-point enabled="true"
				   class-name="com.twitter.util.Future"
				   method-name="flatMap"
				   capture-key-expression="f"
				   insert-class-name="com.twitter.util.Future$$anonfun$flatMap$1"
				   insert-method-name="apply"
				   insert-key-expression="f" />

	<!-- com.twitter.util.Future.onSuccess -->
	<capture-point enabled="true"
				   class-name="com.twitter.util.Future"
				   method-name="onSuccess"
				   capture-key-expression="f"
				   insert-class-name="com.twitter.util.Future$$anonfun$onSuccess$1"
				   insert-method-name="apply"
				   insert-key-expression="f" />

	<!-- com.twitter.util.onFailure -->
	<capture-point enabled="true"
				   class-name="com.twitter.util.Future"
				   method-name="onFailure"
				   capture-key-expression="fn"
				   insert-class-name="com.twitter.util.Future$$anonfun$onFailure$1"
				   insert-method-name="apply"
				   insert-key-expression="fn" />

	<!-- com.twitter.util.Future.filter
	NOTE: This capture point also works for Future.withFilter. For some reason
	unknown, defining a separate capture point for withFilter doesn't work when this
	one is configured at the same time. In defining a capture point for withFilter,
	the only difference is the [method-name] below. -->
	<capture-point enabled="true"
				   class-name="com.twitter.util.Future"
				   method-name="filter"
				   capture-key-expression="p"
				   insert-class-name="com.twitter.util.Future$$anonfun$filter$1"
				   insert-method-name="apply"
				   insert-key-expression="p" />

	<!-- com.twitter.util.Future.addEventListener -->
	<capture-point enabled="true"
				   class-name="com.twitter.util.Future"
				   method-name="addEventListener"
				   capture-key-expression="listener"
				   insert-class-name="com.twitter.util.Future$$anonfun$addEventListener$1"
				   insert-method-name="apply"
				   insert-key-expression="listener" />

	<!--com.twitter.util.Future.joinWith  -->
	<capture-point enabled="true"
				   class-name="com.twitter.util.Future"
				   method-name="joinWith"
				   capture-key-expression="fn"
				   insert-class-name="com.twitter.util.Future$$anonfun$joinWith$1$$anonfun$apply$4"
				   insert-method-name="apply"
				   insert-key-expression="fn" />

	<!-- com.twitter.util.Future.ensure
	NOTE: Even though we capture Future.respond, this capture point only applies when
	Future.ensure is called. See [insert-class-name] below. -->
	<capture-point enabled="true"
				   class-name="com.twitter.util.Future"
				   method-name="respond"
				   capture-key-expression="k"
				   insert-class-name="com.twitter.util.Future$$anonfun$ensure$1"
				   insert-method-name="apply"
				   insert-key-expression="this" />

</capture-points>
